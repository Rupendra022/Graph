class Solution {
    public static void helper(int node , boolean[] vis ,ArrayList<Integer> ans, ArrayList<ArrayList<Integer>> adj ){
        
        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        vis[node] = true ; 
        
        while(!q.isEmpty()){
            int curr = q.poll();
            ans.add(curr);
            for(int nei : adj.get(curr)){
                if(!vis[nei]){
                    vis[nei] = true ; 
                    q.add(nei);
                }
            }
        }
    }
    // Function to return Breadth First Search Traversal of given graph.
    public ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> adj) {
        // code here
        
        int v = adj.size();
        boolean[] vis = new boolean[v];
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i = 0 ; i<v ; i++){
            if(!vis[i]){
                helper(i,vis,ans,adj);
            }
        }
        
    return ans ; 
    }
}
