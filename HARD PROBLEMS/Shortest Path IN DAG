// User function Template for Java

// USING TOPOSORT(STACK) AND DIST ARRAY 
import java.util.*;

class Pair {
    int v;
    int wt;
    Pair(int v, int wt) {
        this.v = v;
        this.wt = wt;
    }
}

class Solution {

    public static void topoSort(int node, int[] vis, Stack<Integer> st, ArrayList<ArrayList<Pair>> adj) {
        vis[node] = 1;
        for (Pair nei : adj.get(node)) {
            int next = nei.v;
            if (vis[next] == 0) {
                topoSort(next, vis, st, adj);
            }
        }
        st.push(node);
    }

    public int[] shortestPath(int V, int E, int[][] edges) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();

        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < E; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            adj.get(u).add(new Pair(v, wt));
        }

        int[] vis = new int[V];
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < V; i++) {
            if (vis[i] == 0) {
                topoSort(i, vis, st, adj);
            }
        }

        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[0] = 0;

        while (!st.isEmpty()) {
            int current = st.pop();
            if (dist[current] != Integer.MAX_VALUE) {
                for (Pair nei : adj.get(current)) {
                    int nextNode = nei.v;
                    int weight = nei.wt;
                    if (dist[current] + weight < dist[nextNode]) {
                        dist[nextNode] = dist[current] + weight;
                    }
                }
            }
        }

        for (int i = 0; i < V; i++) {
            if (dist[i] == Integer.MAX_VALUE) dist[i] = -1;
        }

        return dist;
    }
}
